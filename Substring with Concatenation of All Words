class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        if (words.empty() || s.empty()) return {};
        
        unordered_map<string, int> wordCount;
        for (const string& word : words) {
            wordCount[word]++;
        }
        
        int wordLength = words[0].size();
        int totalWords = words.size();
        int windowSize = wordLength * totalWords;
        int strLength = s.size();
        vector<int> result;
        
        for (int i = 0; i < wordLength; i++) {
            int left = i;
            int count = 0;
            unordered_map<string, int> currentMap;
            
            for (int j = i; j <= strLength - wordLength; j += wordLength) {
                string word = s.substr(j, wordLength);
                
                if (wordCount.find(word) != wordCount.end()) {
                    currentMap[word]++;
                    count++;
                    
                    while (currentMap[word] > wordCount[word]) {
                        string leftWord = s.substr(left, wordLength);
                        currentMap[leftWord]--;
                        count--;
                        left += wordLength;
                    }
                    
                    if (count == totalWords) {
                        result.push_back(left);
                        string leftWord = s.substr(left, wordLength);
                        currentMap[leftWord]--;
                        count--;
                        left += wordLength;
                    }
                } else {
                    currentMap.clear();
                    count = 0;
                    left = j + wordLength;
                }
            }
        }
        
        return result;
    }
};
