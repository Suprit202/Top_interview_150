class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) 
    {
        if (words.empty() || s.empty()) return {};
        
        unordered_map<string,int> freq;
        for(string& word: words)
        {
            freq[word]++;
        }

        int len = s.size();
        int n = words.size();
        int wordSize = words[0].size();
        int windowSize = wordSize * n;
        vector<int> ans;

        for(int startPos = 0; startPos < wordSize; startPos++)
        {
            unordered_map<string,int> curr;
            int count = 0;
            int left = startPos;
            
            for(int j = startPos; j <= len - wordSize; j += wordSize)
            {
                string currWord = s.substr(j, wordSize);
                
                if(freq.count(currWord))
                {
                    curr[currWord]++;
                    count++;
                    
                    while(curr[currWord] > freq[currWord])
                    {
                        string leftWord = s.substr(left, wordSize);
                        curr[leftWord]--;
                        count--;
                        left += wordSize;
                    }
                    
                    if(count == n)
                    {
                        ans.push_back(left);
                        string leftWord = s.substr(left, wordSize);
                        curr[leftWord]--;
                        count--;
                        left += wordSize;
                    }
                }
                else
                {
                    curr.clear();
                    count = 0;
                    left = j + wordSize;
                }
            }
        }

        return ans;
    }
};
